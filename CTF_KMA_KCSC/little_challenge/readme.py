# input: 009C0D9F
# cipher: 0019FEF4

cipher = [
    0x40, 0x46, 0xCE, 0xA9, 0x8C, 0xC4, 0x6D, 0x80, 0x5F, 0xB1, 
    0xFE, 0x0F, 0xC2, 0x7E, 0xAA, 0x17, 0xC2, 0xF7, 0x34, 0x27, 
    0x62, 0x0A, 0x99, 0xAC, 0x58, 0x30, 0xC1, 0xAC, 0x1D, 0x10, 
    0xED, 0x8A, 0xCE
]

input = [
    0x74, 0x75, 0x6E, 0x67, 0x64, 0x65, 0x70, 0x74, 0x72, 0x61, 
    0x69, 0x63, 0x6F, 0x6D, 0x6F, 0x74, 0x6B, 0x68, 0x6F, 0x6E, 
    0x67, 0x63, 0x6F
]   # tungdeptraicomotkhongco

input_chuan = [
    0x39, 0x46, 0x50, 0x49, 0x55, 0x36, 0x76, 0x55, 0x78, 0x66,
    0x51, 0x4f, 0x48, 0x61, 0x69, 0x73, 0x4f, 0x43, 0x68, 0x44,
    0x59, 0x31, 0x46
    # 0x38, 0x47, 0x51, 0x48, 0x54, 0x37, 0x77, 0x54, 0x79, 0x67,
    # 0x50, 0x4e, 0x49, 0x60, 0x68, 0x72, 0x4e, 0x42, 0x69, 0x45,
    # 0x58, 0x30, 0x47
]   # 9FPIU6vUxfQOHaisOChDY1F

MBNBN = [
    0x4D, 0x61, 0x69, 0x20, 0x62, 0x65, 0x6E, 0x20, 0x6E, 0x68, 
    0x61, 0x75, 0x20, 0x62, 0x61, 0x6E, 0x20, 0x6E, 0x68, 0x65, 
    0x20, 0x3A, 0x29
]   # Mai ben nhau ban nhe :)

buf2 = [
    0xE3, 0x2E, 0xD0, 0xA6, 0xD6, 0x7D, 0x54, 0x3F, 0xAC, 0x0F, 
    0x24, 0x10, 0x9C, 0xCB, 0x26, 0xBC, 0xB3, 0x89, 0x84, 0x24, 
    0x80, 0xBD, 0x48
]   # 0019FE78

def RC4_map(key):  
    map = []
    for i in range(256): map.append(i)
    tmp = 0
    for i in range(256):
        tmp = (key[i % len(key)] + map[i] + tmp) %  256
        map[i], map[tmp] = map[tmp], map[i]
    return map

def RC4_en(map, data):
    tmp1, tmp2 = 0, 0
    for i in range(len(data)):
        tmp1 = (tmp1 + 1) % 256
        tmp2 = (map[tmp1] + tmp2) % 256
        map[tmp1], map[tmp2] = map[tmp2], map[tmp1]
        data[i]  ^= map[(map[tmp1] + map[tmp2]) % 256]
    return data

def input_xor(data):
    for i in range(len(data)):
        data[i] ^= 0xAB
    return data

def print_hex(ans):
    for i in range(len(ans)):
        if i % 10 == 9: print(f"{hex(ans[i])},")
        else: print(hex(ans[i]), ", ", sep = '',end = '')

if __name__ == "__main__":
    # # ans = input_xor(input)
    # # map = RC4_map(MBNBN)
    # # ans = RC4_en(map, ans)
    # # print_hex(ans)
    # # # ans = [hex(x) for x in ans]
    # # # print(ans)

    # map = RC4_map(MBNBN)
    # ans = RC4_en(map, buf2)
    # ans = input_xor(ans)
    # # print_hex(ans)
    # ans = [chr(x) for x in ans]
    # for i in range(len(ans)): print(ans[i], end = '')

    map = RC4_map(input_chuan)
    ans = RC4_en(map, cipher)
    ans = [chr(x) for x in ans]
    for i in range(len(ans)): print(ans[i], end = '')