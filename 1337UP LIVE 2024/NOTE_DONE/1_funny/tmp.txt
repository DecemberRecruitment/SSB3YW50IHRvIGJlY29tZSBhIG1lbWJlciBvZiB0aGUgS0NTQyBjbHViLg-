# for i in range(26):
#     print(chr(i + 65))
# map = [
#     [1, 2, 2, 2, 7, 2, 2], # A 0
#     [6, 2, 2, 6, 2, 2, 6], # B 1
#     [5, 2, 1, 1, 1, 2, 5], # C 2
#     [6, 2, 2, 2, 2, 2, 6], # D 3
#     [7, 1, 1, 5, 1, 1, 7], # E 4
#     [7, 1, 1, 5, 1, 1, 1], # F 5
#     [5, 2, 1, 5, 2, 2, 5], # G 6
#     [2, 2, 2, 7, 2, 2, 2], # H 7
#     [3, 1, 1, 1, 1, 1, 3], # I 8
#     [1, 1, 1, 1, 2, 2, 5], # J 9
#     [2, 2, 2, 3, 2, 2, 2], # K 10
#     [1, 1, 1, 1, 1, 1, 7], # L 11
#     [2, 4, 4, 3, 2, 2, 2], # M 12
#     [2, 3, 3, 3, 3, 3, 2], # N 13
#     [7, 2, 2, 2, 2, 2, 7], # O 14
#     [6, 2, 2, 6, 1, 1, 1], # P 15
#     [5, 2, 2, 2, 3, 2, 5], # Q 16
#     [6, 2, 2, 6, 2, 2, 2], # R 17
#     [5, 2, 1, 5, 1, 2, 5], # S 18
#     [7, 1, 1, 1, 1, 1, 1], # T 19
#     [2, 2, 2, 2, 2, 2, 5], # U 20
#     [2, 2, 2, 2, 2, 2, 1], # V 21
#     [2, 3, 3, 3, 3, 3, 4], # W 22
#     [2, 2, 2, 1, 2, 2, 2], # X 23
#     [2, 2, 2, 1, 1, 1, 1], # Y 24
#     [7, 1, 1, 1, 1, 1, 7], # Z 25
# ]

map = [
    [1, 2, 2, 2, 7, 2, 2], # A 0
    [6, 2, 2, 6, 2, 2, 6], # B 1
    [5, 2, 1, 1, 1, 2, 5], # C 2
    [6, 2, 2, 2, 2, 2, 6], # D 3
    [7, 1, 1, 5, 1, 1, 7], # E 4
    [7, 1, 1, 5, 1, 1, 1], # F 5
    [5, 2, 1, 5, 2, 2, 5], # G 6
    [2, 2, 2, 7, 2, 2, 2], # H 7
    [3, 1, 1, 1, 1, 1, 3], # I 8
    [1, 1, 1, 1, 2, 2, 5], # J 9
    [2, 2, 2, 3, 2, 2, 2], # K 10
    [1, 1, 1, 1, 1, 1, 7], # L 11
    [2, 4, 4, 3, 2, 2, 2], # M 12
    [2, 3, 3, 3, 3, 3, 2], # N 13
    [7, 2, 2, 2, 2, 2, 7], # O 14
    [6, 2, 2, 6, 1, 1, 1], # P 15
    [5, 2, 2, 2, 3, 2, 5], # Q 16
    [6, 2, 2, 6, 2, 2, 2], # R 17
    [5, 2, 1, 5, 1, 2, 5], # S 18
    [7, 1, 1, 1, 1, 1, 1], # T 19
    [2, 2, 2, 2, 2, 2, 5], # U 20
    [2, 2, 2, 2, 2, 2, 1], # V 21
    [2, 3, 3, 3, 3, 3, 4], # W 22
    [2, 2, 2, 1, 2, 2, 2], # X 23
    [2, 2, 2, 1, 1, 1, 1], # Y 24
    [7, 1, 1, 1, 1, 1, 7], # Z 25
    # 1, 2, 2, 2, 7, 2, 2, # A 0
    # 6, 2, 2, 6, 2, 2, 6, # B 1
    # 5, 2, 1, 1, 1, 2, 5, # C 2
    # 6, 2, 2, 2, 2, 2, 6, # D 3
    # 7, 1, 1, 5, 1, 1, 7, # E 4
    # 7, 1, 1, 5, 1, 1, 1, # F 5
    # 5, 2, 1, 5, 2, 2, 5, # G 6
    # 2, 2, 2, 7, 2, 2, 2, # H 7
    # 3, 1, 1, 1, 1, 1, 3, # I 8
    # 1, 1, 1, 1, 2, 2, 5, # J 9
    # 2, 2, 2, 3, 2, 2, 2, # K 10
    # 1, 1, 1, 1, 1, 1, 7, # L 11
    # 2, 4, 4, 3, 2, 2, 2, # M 12
    # 2, 3, 3, 3, 3, 3, 2, # N 13
    # 7, 2, 2, 2, 2, 2, 7, # O 14
    # 6, 2, 2, 6, 1, 1, 1, # P 15
    # 5, 2, 2, 2, 3, 2, 5, # Q 16
    # 6, 2, 2, 6, 2, 2, 2, # R 17
    # 5, 2, 1, 5, 1, 2, 5, # S 18
    # 7, 1, 1, 1, 1, 1, 1, # T 19
    # 2, 2, 2, 2, 2, 2, 5, # U 20
    # 2, 2, 2, 2, 2, 2, 1, # V 21
    # 2, 3, 3, 3, 3, 3, 4, # W 22
    # 2, 2, 2, 1, 2, 2, 2, # X 23
    # 2, 2, 2, 1, 1, 1, 1, # Y 24
    # 7, 1, 1, 1, 1, 1, 7  # Z 25
]



# print(map[1][0])

ans = [
    128 , 52, 49, 95, 44, 45, 94
]

def hpt(flag, k):
    sum = 0
    for i in range(len(flag)):
        sum += flag[i] * map[i][k]
    return sum


from z3 import *
flag = [Int(f"flag[{i}]") for i in range(26)]

s = Solver()

for i in range(26):
    s.add(flag[i] >= 0, flag[i] <= 25)

for i in range(7):
    s.add(ans[i] == hpt(flag, i))


# print(s)

if s.check() == sat:
    m = s.model()
    for c in flag:
        print(m[c].as_long())

# solutions = []
# while s.check() == sat:
#     m = s.model()
#     solution = [m[c].as_long() for c in flag]
#     print(solution)
#     solutions.append(solution)
    
#     # Block the current solution by adding a new constraint
#     # This ensures the solver will find another solution
#     s.add(Or([flag[i] != m[flag[i]] for i in range(26)]))
    

# # # Print all solutions found
# # for solution in solutions:
# #     print(solution)




