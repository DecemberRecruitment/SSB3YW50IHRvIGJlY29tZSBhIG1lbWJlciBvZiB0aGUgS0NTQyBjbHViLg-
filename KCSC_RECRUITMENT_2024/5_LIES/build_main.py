# 12345678901234567890123456789012
# tungdvandeptraicomotkhongcohainh

SBOX = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

def transpose4x4(m):
    return m[0::4] + m[1::4] + m[2::4] + m[3::4]

def list2hex(list):
    list = list[::-1]
    hex = ""
    for e in list:
        hex += "{:02X}".format(e)
    return hex

def hex2list(hex):
    byte_list = [hex[i:i+2] for i in range(0, len(hex), 2)][::-1]
    hex = ''.join(byte_list)
    lst = []
    if len(hex) % 2 == 0:
        for i in range(len(hex)//2):
            lst.append(int(hex[i*2:i*2+2], 16))
    return lst

def xor(bytelist1, bytelist2):
    res = []
    length = min(len(bytelist1), len(bytelist2))
    for i in range(length):
        res.append(bytelist1[i] ^ bytelist2[i])
    return res

def aesenc_cal(state, roundkey, last=False):
    def shift_rows(state):
        state[4], state[5], state[6], state[7] = state[5], state[6], state[7], state[4]
        state[8], state[9], state[10], state[11] = state[10], state[11], state[8], state[9]
        state[12], state[13], state[14], state[15] = state[15], state[12], state[13], state[14]

    def sub_bytes(state):
        for i in range(16):
            state[i] = SBOX[state[i]]

    def mix_columns(state):
        xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)

        def mix_column(col):
            t = col[0] ^ col[1] ^ col[2] ^ col[3]
            u = col[0]
            col[0] ^= t ^ xtime(col[0] ^ col[1])
            col[1] ^= t ^ xtime(col[1] ^ col[2])
            col[2] ^= t ^ xtime(col[2] ^ col[3])
            col[3] ^= t ^ xtime(col[3] ^ u)
            return col

        out = [None]*16
        for i in range(0,4):
            out[i::4] = mix_column(state[i::4])
        return out

    sub_bytes(state)
    shift_rows(state)
    if not last:
        state = mix_columns(state)
    return xor(state, roundkey)

def aesenc(dat, k):
    data = transpose4x4(hex2list(dat.hex()))
    key = transpose4x4(hex2list(k.hex()))    
    res = transpose4x4(aesenc_cal(data, key))
    return bytes.fromhex(list2hex(res))

def aesenclast(dat, k):
    data = transpose4x4(hex2list(dat.hex()))
    key = transpose4x4(hex2list(k.hex()))    
    res = transpose4x4(aesenc_cal(data, key, last=True))
    return bytes.fromhex(list2hex(res))


input = [
    0x74, 0x75, 0x6E, 0x67, 0x64, 0x76, 0x61, 0x6E, 0x64, 0x65, 
    0x70, 0x74, 0x72, 0x61, 0x69, 0x63, 0x6F, 0x6D, 0x6F, 0x74, 
    0x6B, 0x68, 0x6F, 0x6E, 0x67, 0x63, 0x6F, 0x68, 0x61, 0x69, 
    0x6E, 0x68
]

cipher = [
    0x43, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x43, 0x00, 
    0x00, 0x00, 0x4B, 0x00, 0x00, 0x00
]

flag_check = [
    0x9C, 0x87, 0x9C, 0x6E, 0x64, 0x27, 0x3B, 0x78, 0x71, 0x53, 
    0x2B, 0x6D, 0xD4, 0x0E, 0x82, 0x22, 0x5D, 0xC4, 0xE2, 0xE8, 
    0x07, 0xB9, 0x85, 0xA7, 0x49, 0x9A, 0x6D, 0xD4, 0xFC, 0x64, 
    0xBA, 0x02
]

ASE_xor = [
    0x1D, 0x97, 0x2B, 0x75, 0x6B, 0x11, 0xA2, 0xA5, 0xEC, 0x95, 
    0x5C, 0x49, 0xE6, 0x04, 0x33, 0x92, 0xEC, 0x44, 0xA1, 0x2A, 
    0xEC, 0x61, 0x46, 0x88, 0xC8, 0x49, 0xE8, 0x6D, 0x75, 0xD7, 
    0xF7, 0x20
]

# tung = bytes(cipher)
# print(tung)

map = [
    # phake
    # 0x89, 0x49, 0x1a, 0x48, 0x98, 0xd6, 0xaf, 0x56, 0xce, 0x67,
    # 0xed, 0x16, 0x2e, 0x2f, 0x53, 0x8f, 0x08, 0xc3, 0x94, 0x15,
    # 0x50, 0x4d, 0x69, 0x33, 0x03, 0x1c, 0x2c, 0xea, 0xbb, 0xcc,
    # 0x57, 0x7c, 0x59, 0x8d, 0x3e, 0x9f, 0x8b, 0xe6, 0x74, 0xa4,
    # 0x40, 0xa2, 0xa8, 0x39, 0x2a, 0x36, 0xc7, 0x5b, 0xf0, 0xb4,
    # 0xd7, 0x87, 0xde, 0xf7, 0x4a, 0x8a, 0x77, 0x30, 0x75, 0xe5,
    # 0x88, 0x5a, 0xdf, 0xc2, 0x41, 0xdd, 0x52, 0x93, 0xa3, 0x3a,
    # 0xfe, 0xa6, 0x21, 0xd9, 0x4b, 0xc5, 0x5d, 0x62, 0x17, 0x66,
    # 0xc6, 0x1e, 0xe4, 0xca, 0x46, 0x19, 0x76, 0x92, 0x78, 0xec,
    # 0xb5, 0x63, 0xf4, 0xf2, 0x7b, 0x27, 0x8c, 0x31, 0xa9, 0x3b,
    # 0x12, 0xaa, 0x73, 0x9d, 0x05, 0xe9, 0xb6, 0xab, 0x0b, 0x4f,
    # 0x97, 0x7e, 0xba, 0x9e, 0x20, 0x25, 0x71, 0x38, 0x80, 0x0e,
    # 0x64, 0xeb, 0xe2, 0xb0, 0xfa, 0xf1, 0xad, 0x44, 0x61, 0xf6,
    # 0xff, 0x28, 0xd0, 0x13, 0x99, 0xfd, 0xda, 0x6b, 0x3c, 0x22,
    # 0x51, 0x6e, 0xb2, 0x45, 0x26, 0x7f, 0xf8, 0x0c, 0xbc, 0x1b,
    # 0x6d, 0xc4, 0x42, 0xd8, 0x84, 0x72, 0xb3, 0x8e, 0x43, 0x1d,
    # 0xb9, 0x5c, 0xbe, 0x5e, 0x5f, 0x83, 0xcb, 0x85, 0x95, 0x9b,
    # 0xae, 0xe8, 0x70, 0xb7, 0xd5, 0xe3, 0xbf, 0xcf, 0x6c, 0xd3,
    # 0x47, 0xc1, 0x14, 0x0d, 0x01, 0xe1, 0xc9, 0x3f, 0xef, 0x18,
    # 0x68, 0xa7, 0xe0, 0xc8, 0x00, 0x86, 0x1f, 0xf5, 0xfb, 0x6a,
    # 0xdb, 0x54, 0xd4, 0x09, 0xd2, 0xcd, 0x37, 0x23, 0xd1, 0xee,
    # 0x2d, 0xac, 0x60, 0x4e, 0xe7, 0x79, 0x90, 0xb1, 0x9a, 0x0f,
    # 0x6f, 0x02, 0x7d, 0x0a, 0xa1, 0xa5, 0xa0, 0x06, 0x55, 0x24,
    # 0x58, 0xc0, 0xbd, 0x91, 0x2b, 0xf3, 0x96, 0x9c, 0x07, 0xdc,
    # 0xf9, 0x29, 0x35, 0x04, 0x81, 0x7a, 0x82, 0xb8, 0x4c, 0x3d,
    # 0x65, 0x11, 0x34, 0xfc, 0x10, 0x32

    # real
    0x89, 0xcd, 0x32, 0x41, 0x9a, 0x7c, 0xe5, 0x51, 0xf1, 0xc2,
    0xa1, 0x76, 0x96, 0x59, 0x5f, 0x7a, 0x4f, 0x47, 0x88, 0x70,
    0x4c, 0x63, 0x28, 0xa4, 0x21, 0x90, 0xea, 0x00, 0x09, 0xb0,
    0x8f, 0x16, 0x3a, 0x8d, 0x3e, 0x9f, 0x8b, 0xe6, 0x74, 0x33,
    0x40, 0xa2, 0xa8, 0x39, 0x2a, 0x36, 0xc7, 0x5b, 0xf0, 0xb4,
    0xd7, 0x87, 0xde, 0xf7, 0x4a, 0x8a, 0x77, 0x30, 0x75, 0xaf,
    0x94, 0x5a, 0xdf, 0x67, 0x48, 0xdd, 0x52, 0x93, 0xa3, 0x2f,
    0xfe, 0xa6, 0x03, 0xd9, 0x4b, 0xc5, 0x5d, 0x62, 0x17, 0x66,
    0xc6, 0x1e, 0xe4, 0xca, 0x46, 0x19, 0xd6, 0x92, 0x78, 0xec,
    0xb5, 0x4d, 0xf4, 0xf2, 0x7b, 0x27, 0x8c, 0x31, 0xa9, 0x3b,
    0x12, 0xaa, 0x73, 0x9d, 0x05, 0xe9, 0xb6, 0xab, 0x0b, 0x08,
    0x97, 0x7e, 0xba, 0x9e, 0x20, 0x25, 0x71, 0x38, 0x80, 0x0e,
    0x64, 0xeb, 0xe2, 0xcc, 0xfa, 0xce, 0xad, 0x44, 0x61, 0xf6,
    0xff, 0x69, 0xd0, 0x13, 0x99, 0xfd, 0xda, 0x6b, 0x3c, 0x22,
    0x56, 0x6e, 0xb2, 0x45, 0x26, 0x7f, 0xf8, 0x0c, 0xbc, 0x1b,
    0x6d, 0xc4, 0x42, 0xd8, 0x84, 0x72, 0xb3, 0x8e, 0x43, 0x1d,
    0xb9, 0x5c, 0xbe, 0x5e, 0x53, 0x83, 0xcb, 0x85, 0x95, 0x9b,
    0xae, 0xe8, 0x15, 0xb7, 0xd5, 0xe3, 0xbf, 0xcf, 0x6c, 0xd3,
    0xc3, 0xc1, 0x14, 0x0d, 0x01, 0xe1, 0xc9, 0x3f, 0xef, 0x18,
    0x68, 0xa7, 0xe0, 0xc8, 0x2c, 0x86, 0x1f, 0xf5, 0xfb, 0x6a,
    0xdb, 0x54, 0xd4, 0xbb, 0xd2, 0x49, 0x37, 0x23, 0xd1, 0xee,
    0x2d, 0xac, 0x60, 0x4e, 0xe7, 0x79, 0x1c, 0xb1, 0x98, 0x0f,
    0x6f, 0x02, 0x7d, 0x0a, 0xed, 0xa5, 0xa0, 0x06, 0x55, 0x24,
    0x58, 0xc0, 0xbd, 0x91, 0x2b, 0xf3, 0x2e, 0x9c, 0x07, 0xdc,
    0xf9, 0x29, 0x35, 0x04, 0x81, 0x57, 0x82, 0xb8, 0x50, 0x3d,
    0x65, 0x11, 0x34, 0xfc, 0x10, 0x1a
]

byte_xor = [
    0x1D, 0x97, 0x2B, 0x75, 0x6B, 0x11, 0xA2, 0xA5, 0xEC, 0x95, 
    0x5C, 0x49, 0xE6, 0x04, 0x33, 0x92, 0xEC, 0x44, 0xA1, 0x2A, 
    0xEC, 0x61, 0x46, 0x88, 0xC8, 0x49, 0xE8, 0x6D, 0x75, 0xD7, 
    0xF7, 0x20
]

KCSC = [
    0x43, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x43, 0x00, 
    0x00, 0x00, 0x4B, 0x00, 0x00, 0x00
]

def pow_a_b_mod_251(a, b):
    ans = 1
    while b:
        if b & 1 != 0:
            ans = (a * ans) % 251
        b >>= 1
        a = (a * a) % 251
    return ans

def ROL_8bit(a1, a2):
    return ((a1 >> (8 - a2)) | ((a1 << a2)  & 0xff))

if __name__ == '__main__':# tungdvandeptraicomotkhongcohainh
    for i in range(0x20):
        input[i] ^= 0xAB
#################
    for i in range(0x20):
        input[i] ^= (i + 0xAB) & 0xFF
#################
    for i in range(0, 0x20, 4):
        input[i] ^= 0xEF
        input[i + 1] ^= 0xBE
        input[i + 2] ^= 0xFE
        input[i + 3] ^= 0xC0
#################
    for i in range(0, 0x20, 4):
        input[i] ^= 0xBE
        input[i + 1] ^= 0xBA
        input[i + 2] ^= 0xAD
        input[i + 3] ^= 0xDE
#################
    for i in range(0x20):
        input[i] ^= 0xCD
#################
    for i in range(0x20):
        input[i] ^= (i + 0xCD) & 0xFF
#################
    for i in range(0, 0x20, 4):
        input[i] ^= 0xBE
        input[i + 1] ^= 0xBA
        input[i + 2] ^= 0xFE
        input[i + 3] ^= 0xC0
#################
    for i in range(0, 0x20, 4):
        input[i] ^= 0xEF
        input[i + 1] ^= 0xBE    
        input[i + 2] ^= 0xAD
        input[i + 3] ^= 0xDE
#################
    for i in range(0x20):
        input[i] ^= 0xEF
#################
    for i in range(0x20):
        input[i] ^= (i + 0xEF) & 0xFF
#################
    swaps = []
    
    v4, v5 = 0, 0
    for i in range(0x20):
        v5 += 1
        v4 = (v4 + map[v5]) & 0xff
        map[v4], map[v5] = map[v5], map[v4]
        swaps.append((v4, v5))
        input[i] ^= map[(map[v4] + map[v5]) & 0xff]

    # print(swaps)
#################
    # for i in range(0x20):
    #     if i % 10 == 9: print(f'0x{input[i]:02x}', end = ',\n')
    #     else: print(f'0x{input[i]:02x}', end = ', ')
#################
    # k = b'\x00\x00\x00K\x00\x00\x00C\x00\x00\x00S\x00\x00\x00C'
    # tmp1 = input[0:16]
    # for i in range(len(tmp1)):
    #     tmp1[i] ^= KCSC[i]
    # tmp1 = bytes(tmp1)
    # tmp1 = tmp1[::-1]
    # tmp1 = aesenc(tmp1, k)
    # tmp1 = aesenclast(tmp1, k)
    # tmp1 = list(tmp1)
    # tmp1 = tmp1[::-1]
    # for i in range(16):
    #     input[i] = tmp1[i]


    # tmp1 = input[16:32]
    # for i in range(len(tmp1)):
    #     tmp1[i] ^= KCSC[i]
    # tmp1 = bytes(tmp1)
    # tmp1 = tmp1[::-1]
    # tmp1 = aesenc(tmp1, k)
    # tmp1 = aesenclast(tmp1, k)
    # tmp1 = list(tmp1)
    # tmp1 = tmp1[::-1]
    # for i in range(16, 32):
    #     input[i] = tmp1[i - 16]
    # for i in range(0x20):
    #     input[i] ^= ASE_xor[i]


    v9 = []
    for i in range(0x20):
        v9.append((0x88 - i) ^ i)
    for i in range(0x20):
        v9[i] = pow_a_b_mod_251(0x88, v9[i])
    k = b'\x00\x00\x00K\x00\x00\x00C\x00\x00\x00S\x00\x00\x00C'
    # 00EAF96C
    for i in range(88):
        tmp1 = v9[0:16:]
        for i in range(0x10): tmp1[i] ^= KCSC[i]
        tmp1 = bytes(tmp1[::-1])
        tmp1 = aesenc(tmp1, k)
        tmp1 = aesenclast(tmp1, k)
        tmp1 = list(tmp1[::-1])
        for i in range(0x10): v9[i] = tmp1[i]

        tmp1 = v9[16:32:]
        for i in range(0x10): tmp1[i] ^= KCSC[i]
        tmp1 = bytes(tmp1[::-1])
        tmp1 = aesenc(tmp1, k)
        tmp1 = aesenclast(tmp1, k)
        tmp1 = list(tmp1[::-1])
        for i in range(0x10): v9[i + 0x10] = tmp1[i]

    # for i in range(0x20):
    #     input[i] = ROL_8bit(input[i], i & 7)

    # for i in range(0x20):
    #     input[i] ^= v9[i]

    # for i in range(0x20):
    #     input[i] = ROL_8bit(input[i], 8 - (i & 7))

    # for i in range(0x20):
    #     input[i] ^= (0xff - v9[i])

    # for i in range(0x20):
    #     if i % 10 == 9: print(f'0x{v9[i]:02x}', end = ',\n')
    #     else: print(f'0x{v9[i]:02x}', end = ', ')

    print()
    for i in range(0x20):
        if i % 10 == 9: print(f'0x{input[i]:02x}', end = ',\n')
        else: print(f'0x{input[i]:02x}', end = ', ')





# tungdvandeptraicomotkhongcohainh

